# Generated by Django 4.2.3 on 2024-07-11 10:34

import apps.user.managers
import base.fields
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'Пользователь с таким именем уже существует'}, help_text='150 символов или меньше. Может содержать только буквы, цифры и символы @/./+/-/_ .', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='Username')),
                ('email', models.EmailField(blank=True, max_length=150, null=True, verbose_name='E-mail')),
                ('phone', base.fields.PhoneNumberField(blank=True, db_index=True, max_length=128, null=True, region=None, verbose_name='Телефон')),
                ('roles', base.fields.ChoiceArrayField(base_field=models.CharField(choices=[('Customer', 'Customer'), ('Manager', 'Manager'), ('Administrator', 'Administrator')], default='Customer'), size=None, verbose_name='Роли')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активный?')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Админ?')),
                ('first_name', models.CharField(blank=True, db_index=True, default='', max_length=150, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, db_index=True, default='', max_length=150, verbose_name='Фамилия')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('avatar', models.URLField(blank=True, null=True, verbose_name='Аватар')),
                ('jwt_updated_at', models.DateField(blank=True, help_text='Если в ссылке для авторизации по JWT токену приходит дата позже этой, то обновляем личные данные пользователя', null=True, verbose_name='Дата обновления по JWT токену')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', apps.user.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Право доступа')),
            ],
            options={
                'verbose_name': 'Право доступа',
                'verbose_name_plural': 'Права доступа',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now_add=True, verbose_name='Изменено')),
                ('code', models.CharField(db_index=True, max_length=150, verbose_name='Код')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('user', base.fields.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referral_user', to=settings.AUTH_USER_MODEL, verbose_name='Создатель кода')),
            ],
            options={
                'verbose_name': 'Реферальный код',
                'verbose_name_plural': 'Реферальные коды',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Point',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.PositiveIntegerField(verbose_name='Баллы')),
                ('user', base.fields.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_user', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Балл',
                'verbose_name_plural': 'Баллы',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ForgetRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.CharField(max_length=30, verbose_name='Код ссылки')),
                ('enabled', models.BooleanField(default=True, verbose_name='Статус запроса')),
                ('user', base.fields.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forget_requests', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Восстановление пароля',
                'verbose_name_plural': 'Восстановление паролей',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='permissions',
            field=models.ManyToManyField(blank=True, to='user.permission', verbose_name='Права доступа'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
